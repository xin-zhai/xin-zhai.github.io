<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhai-xin&#39;s blog</title>
  
  
  <link href="/xin-zhai.github.io/atom.xml" rel="self"/>
  
  <link href="https://xin-zhai.github.io/"/>
  <updated>2020-01-20T10:37:06.284Z</updated>
  <id>https://xin-zhai.github.io/</id>
  
  <author>
    <name>zhai xin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一周Tips 03</title>
    <link href="https://xin-zhai.github.io/2020/01/20/%E4%B8%80%E5%91%A8Tips-03/"/>
    <id>https://xin-zhai.github.io/2020/01/20/%E4%B8%80%E5%91%A8Tips-03/</id>
    <published>2020-01-20T10:34:18.000Z</published>
    <updated>2020-01-20T10:37:06.284Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.mac下查看jdk安装路径</strong></p><pre><code>/usr/libexec/java_home -V</code></pre><a id="more"></a>    <p><strong>2.docker</strong><br>查看已有的docker容器的状态</p><pre><code>docker ps -a</code></pre><p>启动和关闭docker</p><pre><code>docker start container_namedocker stop container_name</code></pre><p><strong>3.linux命令复习</strong></p><pre><code>创建文件：mkdir filename复制文件：cp filename1 filename2删除文件：rm -rf filename查看进程：ps -ef| grep process_name杀掉进程：kill -9 process_name创建文件：touch file.*查看文件：cat filename修改文件：vim filename            修改：i 插入，a 添加        修改完成退出：wq!        修改不保存：q!</code></pre><p><strong>4.IDEA快捷键mac版</strong></p><pre><code>全局搜索：command+Shift+f局部搜索：command+f基本代码补全：control+space智能补全：control+shift+space自动结束代码，行末自动添加分号：command+shift+enter注释/取消注释：command+/查询任何东西：double Shift文件内替换：command+r全局替换：command+r+shift</code></pre><p><strong>5.Debug的正确姿势</strong><br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day006_1.png?raw=true" alt=""></p><ol><li>Step Over：进入下一步，如果是方法，就直接跳过</li><li>Step Into：进入下一步，如果是方法，就进入方法内部，但是不会进入JDK封装的方法</li><li>Force Step Into：强制进入下一步，不管是什么方法，即使是JDK封装的方法，也会进入</li><li>Step Out：跳转到下一个断点，没有的话直接运行到最后。</li><li>Run to Cursor：运行到光标处</li><li>Drop Frame：返回到进入方法前(4和5中间的那个)</li></ol><p><strong>6.Android Studio小技巧</strong></p><ol><li>全局搜索<br>control+command+f</li><li>局部搜索<br>command+f</li><li>如何知道手机页面具体的layout<br>运行在当前界面，进入Android Studio，如下图操作<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day006_2.png?raw=true" alt=""><br>然后选择相应的xml即可。</li></ol><p>参考：<br><a href="https://blog.csdn.net/fly910905/article/details/80013391" target="_blank" rel="noopener">https://blog.csdn.net/fly910905/article/details/80013391</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1.mac下查看jdk安装路径&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/libexec/java_home -V&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xin-zhai.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="IDEA" scheme="https://xin-zhai.github.io/tags/IDEA/"/>
    
      <category term="docker" scheme="https://xin-zhai.github.io/tags/docker/"/>
    
      <category term="Debug" scheme="https://xin-zhai.github.io/tags/Debug/"/>
    
      <category term="Linux" scheme="https://xin-zhai.github.io/tags/Linux/"/>
    
      <category term="jdk" scheme="https://xin-zhai.github.io/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://xin-zhai.github.io/2020/01/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://xin-zhai.github.io/2020/01/13/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-01-13T06:35:18.000Z</published>
    <updated>2020-01-13T06:38:08.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、git基础操作"><a href="#一、git基础操作" class="headerlink" title="一、git基础操作"></a>一、git基础操作</h3><p>1.创建git仓库的方式<br>（1）在一个你想要创建git仓库的地方，这里指的是文件路径，使用如下命令</p><pre><code>git init</code></pre><p> 执行该命令后，就会在相应文件夹下生成.git文件，该文件记录你每次的改变，即版本控制。可以使用下面的命令在文件夹中查看.git文件。</p><a id="more"></a> <pre><code>ls -ah</code></pre><p>（2）使用下面的命令直接在相应的文件夹下创建你所命名的git 仓库</p><pre><code>git init repository_name</code></pre><p>2.git 添加文件方式<br>git使用如下命令添加文件到仓库中，需要在将要添加的文件放到仓库中，然后使用命令</p><pre><code>git add filename //添加单个文件，可多次git add .        //添加所有改动</code></pre><p>git 可以多次add，然后再一起commit。</p><p>3.git 提交文件的方式<br>在add后，可以直接使用如下命令进行提交，其中message，是本次提交所改动的信息。</p><pre><code>git commit -m &quot;message&quot;</code></pre><p>4.git 查看当前仓库的状态，比如文件是否改动等</p><pre><code>git status</code></pre><p>该命令会列出未提交的文件的改动信息，以及当前的仓库状态，在哪个分支上等。</p><p>5.git 查看文件的具体改动细节</p><pre><code>git diff filename</code></pre><p>该命令会列出filename文件的所有改动信息</p><p>6.git 查看提交的日志记录</p><pre><code>git loggit log --pretty=oneline //简短的查看日志记录</code></pre><p>7.git 版本回退</p><pre><code>HEAD^：回退到上一个版本HEAD^^:回退到上上个版本HEAD-100：回退到前100个版本git reset --hard HEAD^ 回退到上一个版本修改前的模样git reset --hard 版本号：回到版本号所在的版本，具体如何查看版本号后面说没有退出命令行之前，可以git log查看当前所有提交的版本号进行回退，若是关闭了命令，找不到回退前的版本号的话，可以使用git reflog命令</code></pre><p>8.git 查看工作区与版本库里内容的不同</p><pre><code>git diff HEAD -- filename  //查看filename文件的内容不同</code></pre><p>9.当你修改了工作区的内容，而未放到暂存区或者add到了暂存区，然后进行修改了，你可以使用以下命令，回到你修改前的状态。</p><pre><code>git checkout -- filename</code></pre><p>他是有两种情况，对于第一种情况，是回到修改前的版本库一样的状态，对于第二种状态，是回到添加到暂存区后的状态</p><p>10.对于你提交到暂存区后，你想回退到你修改要提交前的状态，你可以使用以下的命令</p><pre><code>git reset HEAD filename</code></pre><p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p><p>在回退到该状态后，你可以使用git checkout – filename 命令回到修改前的状态。</p><p>11.git 可以删除文件，当你在仓库中rm filename ，之后你通过git status查看状态后，你会发现它提示有文件删除了，如果是误删，你可以从远程仓库恢复到最近提交的版本，命令是 git checkout – filename , 若是不是误删，也想删除版本库中的文件，git rm filename</p><p>12.git 将本地仓库关联远程仓库，之后就可以将本地仓库的内容，推送到远程仓库，进入到本地仓库，然后输入下命令。</p><pre><code>git remote add origin git@github.com:yougithubname/remote_repo_name.git</code></pre><p>13.git 将本地仓库的内容推送到远程仓库</p><pre><code>第一次提交,提交内容，关联仓库git push -u origin master第二次以后的提交，直接提交git push origin master</code></pre><p>14.git 查看远程分支的状态，进入到本地仓库，输入命令</p><pre><code>git remote</code></pre><p>15.git 克隆远程仓库到本地</p><pre><code>git clone SSH path/filename</code></pre><h3 id="二、git-分支操作"><a href="#二、git-分支操作" class="headerlink" title="二、git 分支操作"></a>二、git 分支操作</h3><p>1.git 查看分支</p><pre><code>git branch</code></pre><p>2.git 创建分支</p><pre><code>git branch branch_name</code></pre><p>3.切换分支</p><pre><code>git checkout branch_namegit switch branch_name</code></pre><p>4.创建并切换分支</p><pre><code>git checkout -b branch_namegit switch -c branch_name</code></pre><p>5.合并分支到当前分支</p><pre><code>git merge branch_name</code></pre><p>6.删除分支</p><pre><code>git branch -d branch_name</code></pre><p>7.分支合并的冲突<br>对于冲突，需要手动去修改冲突的内容，然后再提交</p><p>8.查看分支合并图</p><pre><code>git log --graphgit log --graph --pretty=oneline --abbrev-commit</code></pre><p>9.不使用Fast-Forward方式合并，可以看到合并提交的历史</p><pre><code>git merge --no-ff -m &quot;message inception&quot; branch_name</code></pre><p>其中的message为分支合并的说明，你也可以看到此次历史。</p><p>10.bug分支–如何修改bug<br>发现bug后，可以创建一个新的bug分支来修复bug，然后再与master分支合并，如果此时开发的分支正在开发，还有一些内容没有提交，你可以使用git stash命令暂存工作区，然后再去创建bug分支，然后进行修改</p><pre><code>1.确定在哪个分支修改bug,然后创建分支进行bug修改，修改后提交，假如used分支正在工作，首先在该分支上git stash修改master上的分支的buggit checkout mastergit checkout -b error/git switch -c error修复buggit checkout mastergit merge errorgit branch -d errorgit checkout usedgit stash pop/git stash apply and git stash drop之后继续进行编辑git stash list 可以查看stash列表</code></pre><p>此时你会想used分支肯定也有bug，那怎么修复呢？可以直接将master上的修改传到used分支。在used分支上，执行下面的命令</p><pre><code>git cherry-pick error_submit_id</code></pre><p>11.强制删除未合并的分支</p><pre><code>git branch -D branch_name</code></pre><p>12.查看远程库的信息</p><pre><code>git remote -v将更新推送到远程库的某个分支git push origin branch_name如果远程库比你本地要新，则会更新失败，此时需要将最新版本抓取下来git pull解决冲突后，再次推送</code></pre><p>13.在本地创建与远程分支对应的分支，本地分支最好与远程分支的名称一致</p><pre><code>git checkout -b branch_name origin/branch_name</code></pre><p>14.建立本地分支和远程分支的关联</p><pre><code>git branch --set-upstream branch_name origin/branch_name</code></pre><p><strong>参考链接：</strong><br><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、git基础操作&quot;&gt;&lt;a href=&quot;#一、git基础操作&quot; class=&quot;headerlink&quot; title=&quot;一、git基础操作&quot;&gt;&lt;/a&gt;一、git基础操作&lt;/h3&gt;&lt;p&gt;1.创建git仓库的方式&lt;br&gt;（1）在一个你想要创建git仓库的地方，这里指的是文件路径，使用如下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 执行该命令后，就会在相应文件夹下生成.git文件，该文件记录你每次的改变，即版本控制。可以使用下面的命令在文件夹中查看.git文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="系统开发" scheme="https://xin-zhai.github.io/categories/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://xin-zhai.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>一周Tips for 02</title>
    <link href="https://xin-zhai.github.io/2020/01/06/%E4%B8%80%E5%91%A8Tips-for-02/"/>
    <id>https://xin-zhai.github.io/2020/01/06/%E4%B8%80%E5%91%A8Tips-for-02/</id>
    <published>2020-01-06T15:16:19.000Z</published>
    <updated>2020-01-06T15:25:02.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-操作命令"><a href="#1-操作命令" class="headerlink" title="1.操作命令"></a>1.操作命令</h3><p><strong>a.复制文件</strong><br>cp <em>.txt filename<br>b.复制目录<br>cp -r filename1 filename2<br>*</em>b.git命令**<br>1.git提交到远程仓库<br>进入本地的git目录，在其中创建文件或文件夹(修改也是)，然后</p><pre><code>1.git add ./git add filename  文件添加到缓存2.git commit filename -m &quot;描述&quot;  将缓存区内容添加到仓库中3.git push 添加到远程仓库     or git commit filename -am &quot;描述&quot;</code></pre><a id="more"></a><p>2.创建分支</p><pre><code>git branch namegit merge 合并分支git branch -b name 创建分支并切换到该分支下git branch -d name 删除分支git checkout name  切换分支</code></pre><p>关于分支操作，你切换到那个分支，然后对其操作，就会在哪个分支上产生改变，你可以创建一个分支然后对其操作，然后将这个分支合并到主分支上就可以了</p><p>在你创建的分支上你可以在当前分支提交，提交步骤和上面一样(提交之后只能在当前分支可见，主分支不可见)，当你切换到主分支要和他合并时，执行git merge 分支，在这之后直接git push就可以再远程仓库上看到了。</p><p>3.查看当前远程仓库</p><pre><code>git remote 粗略git remote -v 详细</code></pre><p>4.提取远程仓库</p><pre><code>git fetch name(仓库名) branchname(分支名)</code></pre><p>5.删除远程仓库</p><pre><code>git remote rm name</code></pre><p>6.查看提交历史</p><pre><code>git loggit log --oneliine：查看简介的日志记录git log --graph:以拓扑图的方式查看提交的记录git log --reverse：逆序的方式显示日志记录git log --author: 查找指定用户的执行操作记录git log --before        --since        --util        --after        以时间段的方式查看日至提交的记录</code></pre><h3 id="2-概念"><a href="#2-概念" class="headerlink" title="2.概念"></a>2.概念</h3><p>1.<strong>什么是面向对象，面向对象的特征，对象间的关系</strong><br>面向对象我的理解就是，将对象抽象为可视化的数据结构，该数据结构可以表示对象的特征以及属性，一类具有相似特征的对象，可以抽象出一个公共的数据结构，特殊的部分再细化就可以了。具体到操作也只是对抽象出来的对象进行操作，比面向过程的编程高了一个维度，是对象间的互动。</p><p>面向对象有三个特征：继承、封装、多态</p><ul><li>继承：A  extends B 子类继承父类所有的属性和方法，其中构造函数不可以继承，但是可以显示或隐式的调用，类的私有属性(包括final类型的私有属性)，可以继承，但是不能使用，子类拥有父类的私有成员变量，但是不能使用。</li><li>封装：所谓封装就是把对象的属性和操作封起来成为一个独立的整体，从而尽量的隐藏实现的具体细节，保证安全性，对外的话通过接口来进行操作。Java中主要通过private\protected\public三个关键字来进行封装，适当的封装可以提高代码的可读性以及可维护性，同时也可以降低耦合。</li><li>多态：同一个行为拥有不同的表现形式或形态就是多态，在Java中，程序中的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时是不确定的，是在运行时确定的。而对于同一个名称的方法，由于其实现不同和运行时调用的不同，所实现的功能就是不同的。</li></ul><p>对象间的关系：</p><ul><li>use-a：依赖关系</li><li>has-a：组合关系</li><li>is-a：继承关系</li></ul><p>2.<strong>准确阐述SOLID原则以及背后的含义</strong><br>SOLID是面向对象设计中的几个重要原则：</p><ul><li><p>SRP(The Single Responsibility Principle)：单一职责原则<br>一个对象只应该包含单一的职责，并且该职责被完整的封装在一个类中<br>由于一个类承担的职责越多，他被复用的可能性就越小，同时职责越多，耦合就越大，不利于修改维护。</p><p>类的职责主要包含两个方面：数据职责和行为职责，数据职责通过属性来体现，行为职责通过方法来体现。</p><p>单一职责原则主要的目的就是实现高内聚，低耦合。</p></li><li><p>OCP(The Open Closed Principle)：开放封闭原则<br>一个软件系统应该对扩展是开放的，对修改是关闭的。</p><p>其中抽象化是开闭原则的关键。</p></li><li><p>LSP(The Liskov Substitution Princiiple)：里式替换原则<br>所有引用父类的地方，必须能够透明的使用子类的对象。<br>即在软件系统中如果可以使用父类的对象，那么就一定可以使用其子类对象</p><p>由于可以使用父类对象的地方都可以使用子类对象，所以在程序中应该劲量使用父类类型来对对象进行定义，而在运行时在确定其子类的类型，用子类对象来代替父类对象。</p></li><li><p>ISP(The Interface Segregation Principle)：接口分离原则<br>如果接口范围太大，功能太多，应该将其细化为更小的接口，对于客户而言只需要知道他所需要的接口和方法，不知道的就不用分给他。</p><p>细化接口功能，为不同的客户提供不同的接口</p></li><li><p>DIP(The Dependency Inversion Priinciple)：依赖倒转原则<br>高层模块不应该依赖低层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><p>即应该面向接口编程，不要针对实现编程。<br>它的实现方式之一是在代码中使用抽象类，而具体的实现类放在配置文件中。</p><p>依赖注入：接口注入，构造注入，Setter方法注入</p></li></ul><p>3.<strong>准确阐述简单设计四原则以及其优先级的含义</strong><br>a.通过测试<br>所做的测试要满足业务的需求，可以通过客户的验收。</p><p>b.消除重复<br>代码开发中可能因为设计的不够合理，产生很多重复，要消除重复，使得代码更简介，更以维护。消除重复达到高内聚，低耦合。<br>c.接示意图<br>增强代码的可理解性：命名规范，方法体的大小<br>减弱代码的一些干扰因素：减少多余的注释，代码结构更加清晰。</p><p>d.最少元素<br>在不必要的时候，尽可能减少代码元素来降低代码复杂度，保持简单。</p><p>优先级由高到低，通过测试–&gt;消除重复、接示意图–&gt;最少元素<br>4.<strong>准确阐述TDD操作流程和三顶帽子</strong><br>操作流程：测试-&gt;实现-&gt;重构-&gt;测试<br>先写测试，在基于测试的基础上进行实现，然后重构，继续测试，继续实现，直到完成，就是一个循环。</p><p>测试写法：given-&gt;when-&gt;then</p><p>5.<strong>掌握两种Pair的方式和小伙伴协作编码</strong><br>1.驾驶员？<br>一个观察，一个写<br>2.乒乓<br>一起写，交流</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-操作命令&quot;&gt;&lt;a href=&quot;#1-操作命令&quot; class=&quot;headerlink&quot; title=&quot;1.操作命令&quot;&gt;&lt;/a&gt;1.操作命令&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;a.复制文件&lt;/strong&gt;&lt;br&gt;cp &lt;em&gt;.txt filename&lt;br&gt;b.复制目录&lt;br&gt;cp -r filename1 filename2&lt;br&gt;*&lt;/em&gt;b.git命令**&lt;br&gt;1.git提交到远程仓库&lt;br&gt;进入本地的git目录，在其中创建文件或文件夹(修改也是)，然后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.git add ./git add filename  文件添加到缓存
2.git commit filename -m &amp;quot;描述&amp;quot;  将缓存区内容添加到仓库中
3.git push 添加到远程仓库
     or
 git commit filename -am &amp;quot;描述&amp;quot;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xin-zhai.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://xin-zhai.github.io/tags/git/"/>
    
      <category term="SOLID" scheme="https://xin-zhai.github.io/tags/SOLID/"/>
    
      <category term="面向对象" scheme="https://xin-zhai.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="简单四原则" scheme="https://xin-zhai.github.io/tags/%E7%AE%80%E5%8D%95%E5%9B%9B%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>一周Tips for 01</title>
    <link href="https://xin-zhai.github.io/2019/12/26/%E4%B8%80%E5%91%A8Tips-for-01/"/>
    <id>https://xin-zhai.github.io/2019/12/26/%E4%B8%80%E5%91%A8Tips-for-01/</id>
    <published>2019-12-26T13:14:10.000Z</published>
    <updated>2020-01-06T15:25:25.763Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、关于IDEA的用法"><a href="#一、关于IDEA的用法" class="headerlink" title="一、关于IDEA的用法"></a>一、关于IDEA的用法</h4><p><strong>1.对于现有的项目，比如从github上clone下来的项目，应该使用Open导入项目即可使用。</strong><br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_3.png?raw=true" alt="enter image description here"></p><a id="more"></a><p><strong>2.如何打断点调试</strong><br>在相应想要看的地方单击一下对应行的右边会出现红点<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_1.png?raw=true" alt="enter image description here"><br>点击IDEA在运行旁边的小虫子形状的东西，进入Dbug模式，他会在断点处停止，然后你可以点击下边栏的有折的绿箭头，进行一步一步走，顺便看参数是否是你想要传的参数，若是到了某一个方法，你想去看方法的具体走法，可以点击垂直向下的绿箭头，进入方法后，再次点击有折线的箭头，一步一步走，然后看运行流程是否有问题。（其中垂直向上的箭头是跳出当前进入的方法）<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_2.png?raw=true" alt="enter image description here"><br><strong>3.关于IDEA如何直接从github上clone项目以及提交项目</strong><br><strong>1.关于给IDEA配置github账号</strong><br>方便直接从该账号上clone项目，至于如何利用IDEA直接提交项目到git后面来说<br>a.打开IDEA设置偏好的settings<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_4.png?raw=true" alt="enter image description here"></p><p>b.选择version control–&gt;github<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_5.png?raw=true" alt="enter image description here"><br>c.添加GitHub账号和密码<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_6.png?raw=true" alt="enter image description here"><br>之后就添加成功了，至于使用<br>d.选择菜单栏的VCS–&gt;get from version control<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_7.png?raw=true" alt="enter image description here"><br>e.选择你的github账号，就可以看到具体的项目然后clone<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_8.png?raw=true" alt="enter image description here"><br><strong>2.关于如何clone未设置的github上的项目</strong><br>此时只有两步<br>a.择菜单栏的VCS–&gt;get from version control<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_7.png?raw=true" alt="enter image description here"><br>b.在弹出的页面中直接输入对方github项目的URL就可以直接clone<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_9.png?raw=true" alt="enter image description here"><br><strong>3.如何提交项目到github</strong><br>a.配置好git的情况下，新项目，直接share，需要输入账号密码<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_10.png?raw=true" alt="enter image description here"><br>b.直接提交<br>右键项目–&gt;git–&gt;add<br>右键项目–&gt;git–&gt;commit<br>右键项目–&gt;git–&gt;Respository<br>c.非第一次提交，比如clone下来的修改后提交的话<br>(1)commit代码<br>右键项目–&gt;git–&gt;Commit Directory<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_11.png?raw=true" alt="enter image description here"><br>里面可以写一些提交的信息说明，以及选择部分提交<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_12.png?raw=true" alt="enter image description here"><br>(2)在提交到本地仓库后，然后push就可以了<br>右键项目–&gt;git–&gt;Respository–&gt;push<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_13.png?raw=true" alt="enter image description here"><br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_14.png?raw=true" alt="enter image description here"><br><strong>4.如何使用IDEA控制台clone和push项目</strong><br>克隆直接git clone<br>git add /路径文件<br>git commit -m “修改的备注说明”<br>git it push origin master 提交</p><h3 id="二、TDD"><a href="#二、TDD" class="headerlink" title="二、TDD"></a>二、TDD</h3><p><strong>测试–&gt;实现–&gt;重构–&gt;测试</strong><br>先写测试，在基于测试的基础上进行实现，然后重构，继续测试，继续实现，直到完成。就是一个循环。</p><p>测试写法<strong>given–&gt;when–&gt;then</strong><br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_15.png?raw=true" alt="enter image description here"><br>设计模式的重要性<br>代码编写的小TIPS：</p><ul><li>1、不要出现magic number ：对于出现的数字，要使用静态常量的方式为其定义，防止出现开发者不懂。</li><li>2、要看方法名或变量名知道其意思</li><li>3、善用枚举分类来定义变量</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、关于IDEA的用法&quot;&gt;&lt;a href=&quot;#一、关于IDEA的用法&quot; class=&quot;headerlink&quot; title=&quot;一、关于IDEA的用法&quot;&gt;&lt;/a&gt;一、关于IDEA的用法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1.对于现有的项目，比如从github上clone下来的项目，应该使用Open导入项目即可使用。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day004_3.png?raw=true&quot; alt=&quot;enter image description here&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程开发" scheme="https://xin-zhai.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="IDEA" scheme="https://xin-zhai.github.io/tags/IDEA/"/>
    
      <category term="TDD" scheme="https://xin-zhai.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用心得</title>
    <link href="https://xin-zhai.github.io/2019/12/24/Mac%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://xin-zhai.github.io/2019/12/24/Mac%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</id>
    <published>2019-12-24T11:54:47.000Z</published>
    <updated>2020-01-06T13:00:30.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Mac基本快捷键操作"><a href="#一、Mac基本快捷键操作" class="headerlink" title="一、Mac基本快捷键操作"></a>一、Mac基本快捷键操作</h3><p>1.锁屏：command+control+q<br>2.复制：command+c<br>3.粘贴：command+v<br>4.撤销：command+z<br>5.剪贴：command+x<br>6.打开终端：command+space –&gt;输入Terminal.app<br>7.全选：command+a<br>8.在方达中创建一个文件夹：shift+command+n<br>9.切换窗口：command+Tab<br>10.Option+Command+电源按钮：睡眠</p><a id="more"></a><h3 id="二、Mac鼠标操作"><a href="#二、Mac鼠标操作" class="headerlink" title="二、Mac鼠标操作"></a>二、Mac鼠标操作</h3><p>1.在触摸板上滑动鼠标选择位置，双击触摸板打开应用<br>2.两指同时滑动可以浏览网页，以及一些需要滑动的东西</p><h3 id="三、Mac图标"><a href="#三、Mac图标" class="headerlink" title="三、Mac图标"></a>三、Mac图标</h3><p>1.访达相当于windows中的我的电脑<br>2.启动台相当于应用的集合，里面可以找到你所安装的未设置在程序坞中的应用<br>3.所谓程序坞就是指电脑屏幕下方的快捷栏，可以添加常用的应用</p><h3 id="四、Mac命令行的用法"><a href="#四、Mac命令行的用法" class="headerlink" title="四、Mac命令行的用法"></a>四、Mac命令行的用法</h3><p>1.使用下面的命令打开相应路径下的文件(可视化的打开)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open &#x2F;path</span><br></pre></td></tr></table></figure><p>2.访问目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;path</span><br></pre></td></tr></table></figure><p>3.使用终端的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo + 命令</span><br></pre></td></tr></table></figure><p>4.编辑文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim path+filename</span><br><span class="line">i:insert 插入</span><br><span class="line">a:add 添加</span><br><span class="line">q!:强制退出不保存修改</span><br><span class="line">wq!:保存修改强制退出</span><br></pre></td></tr></table></figure><p>5.Mac命令部分集合<br>(1)目录操作</p><ul><li>mkdir：创建文件或目录 –&gt; mkdir filename</li><li>rmdir：删除文件或目录 –&gt; rmdir filename</li><li>mvdir：移动或重命名一个文件或目录 –&gt;mvdir filename</li><li>pwd：查看当前目录的路径</li><li>ls：显示当前目录下的所有文件 –&gt; ls -l</li><li>dircmp：比较两个文件的内容 –&gt; dircmp file1 file2</li></ul><p>(2)文件操作</p><ul><li>cat：查看文件 –&gt; cat filename</li><li>pg：分页格式化的显示文件内容</li><li>more：分屏显示文件内容 –&gt; more filename</li><li>od：显示非文本文件的内容 –&gt; od -c filename</li><li>cp：复制文件或目录 cp file1 file2</li><li>rm：删除文件或目录 rm - rf  file</li><li>find：查找文件，使用正则表达式的方式 –&gt; find -name “*.c” -print</li><li>file：显示文件类型 –&gt; file filename</li></ul><p>(3)选择操作</p><ul><li>head：显示文件的最初几行 –&gt; head -10 filename</li><li>tail：显示文件的最后几行 –&gt; tail -10 filename</li><li>wc：统计文件中的字数 –&gt; wc file</li></ul><p>(4)安全操作</p><ul><li>passwd：修改用户密码</li><li>chmod：改变文件或目录的权限 –&gt; chmod ug+x filename</li><li>xlock：给终端上锁 –&gt; xlock -remote</li></ul><p>(5)进程操作</p><ul><li>ps：显示进程的当前状态 –&gt; ps -ef | grep name</li><li>kill：终止进程 –&gt; kill -9  name</li></ul><p>(6)时间操作</p><ul><li>date：显示当前系统的日期和时间</li><li>cal：显示日历 cal 8 1996</li><li>time：统计程序的执行时间 –&gt; time a.out</li></ul><p>(7)其他操作</p><ul><li>clear：清空屏幕或窗口的内容</li></ul><h3 id="五、Mac安装JDK"><a href="#五、Mac安装JDK" class="headerlink" title="五、Mac安装JDK"></a>五、Mac安装JDK</h3><p>1.先去官网下载JDK：…dmg文件<br><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day001_3.png?raw=true" alt="enter image description here"><br>2.双击文件进行安装<br>3.安装完后使用java -version 查看jdk的安装情况<br>4.配置环境变量<br>(1)sudo vim /etc/profile<br>(2)编辑文件(i或a)，在文件的尾部添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;$(&#x2F;usr&#x2F;libexec&#x2F;java_home)</span><br><span class="line">export PATH&#x3D;.:$PATH:$JAVA_HOME&#x2F;bin</span><br><span class="line">export CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JAVA_HOME</span><br><span class="line">&#x2F;lib&#x2F;dt.jar:.</span><br></pre></td></tr></table></figure><p>(3)esc–&gt;shift+:–&gt;wq!写入</p><p>(4)java -version查看是否安装成功<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day001_1.png?raw=true" alt="enter image description here"><br>(5)查看Jdk的位置<br>/usr/libexec/java_home -v<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day001_2.png?raw=true" alt="enter image description here"></p><h3 id="六、Mac安装Tomcat"><a href="#六、Mac安装Tomcat" class="headerlink" title="六、Mac安装Tomcat"></a>六、Mac安装Tomcat</h3><p>1.去官网下载你所想要安装的tomcat的版本<br> <a href="https://tomcat.apache.org" target="_blank" rel="noopener">https://tomcat.apache.org</a></p><p><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day002_1.png?raw=true" alt="enter image description here"><br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day002_2.png?raw=true" alt="enter image description here"><br>2.解压到你所想要放的目录<br>如果不知道mac如何看文件夹的路径的做法<br>a.首先command+space，打开搜索栏，输入你所想要查询的文件夹的名字，找到他<br>b.然后，可以打开终端，将相应的文件夹拖到终端中，就会显示文件的路径了，下图是我截图<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day002_3.png?raw=true" alt="enter image description here"><br>3.使用cd 进入该路径下的bin文件夹<br>4.执行./startup.sh，你会看到没有权限执行，此时你需要执行下面的命令修改一下权限<br>sudo chmod 755 *.sh 然后在./startup.sh，你就会看到运行成功<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day002_4.png?raw=true" alt="enter image description here"><br>5.去浏览器中输入(localhost:8080)，看到以下页面证明访问成功<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day002_5.png?raw=true" alt="enter image description here"><br>6.在bin目录下，输入./shutdown.sh 关闭tomcat</p><h3 id="七、Mac安装zsh"><a href="#七、Mac安装zsh" class="headerlink" title="七、Mac安装zsh"></a>七、Mac安装zsh</h3><p>1.在终端情况下输入下面的指令进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure><p>2.zsh与bash的切换<br>a.切换为zsh：chsh -s /bin/zsh –&gt;关闭终端然后重新进入<br>b.切换为bash：chsh -s /bin/bash –&gt;关闭终端重新进入</p><p>3.关于zsh的配置，可以切换主题，配置方便的插件</p><h3 id="八、Mac安装git"><a href="#八、Mac安装git" class="headerlink" title="八、Mac安装git"></a>八、Mac安装git</h3><p>在有Homebrew下，brew install git，就可以了<br>更新的话直接覆盖也可以</p><h3 id="九、Mac安装Homebrew"><a href="#九、Mac安装Homebrew" class="headerlink" title="九、Mac安装Homebrew"></a>九、Mac安装Homebrew</h3><p>1.打开终端、输入下面的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure><p> 应该会要让你验证，输入你的苹果密码就可以</p><p> 2.Homebrew的常用命令</p><ul><li>brew –help：查看命令</li><li>man brew：完整的命令帮助</li><li>brew install something：安装软件包</li><li>brew uninstall something：卸载软件包</li><li>brew search something：搜索软件包</li><li>brew list：显示已经安装的软件包</li><li>brew update：同步远程更新软件，指的是安装的所有</li><li>brew upgrade something：单独更新某个软件</li><li>brew info something：查看软件包的信息</li><li>brew home something：访问某个软件的官方网站</li><li>brew cleanup：清理所有已近安装的软件的老版本</li><li>brew cleanup something：清理某个已经安装的软件的老版本</li></ul><h3 id="十、git-amp-github配置"><a href="#十、git-amp-github配置" class="headerlink" title="十、git&amp;github配置"></a>十、git&amp;github配置</h3><p>1.首先，利用homebrew安装好git，或者你自带git然后更新或直接使用<br>2.创建ssh key，配置git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xin.zhai&quot;</span><br><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><p>3.通过终端命令创建ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f rsa -C &quot;xin.zhai@thoughtworks.com&quot;</span><br></pre></td></tr></table></figure><p>回车<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day003_1.png?raw=true" alt="enter image description here"><br>直接使用其推荐的路径<br>下面你也可以设置密码，在你进行操作的时候使用，比如测试连接git是否成功，以及clone项目，上传本地项目。</p><p>4.打开ssh文件，复制里面的key到github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;Users&#x2F;xin.zhai&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day003_2.png?raw=true" alt="enter image description here"><br>5.复制key到github中，如下图<br><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day003_3.png?raw=true" alt="enter image description here"><br>6.测试连接是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day003_4.png?raw=true" alt="enter image description here"></p><h3 id="十一、笔记"><a href="#十一、笔记" class="headerlink" title="十一、笔记"></a>十一、笔记</h3><p>1.Mac上的return键<br>就是回车键</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Mac基本快捷键操作&quot;&gt;&lt;a href=&quot;#一、Mac基本快捷键操作&quot; class=&quot;headerlink&quot; title=&quot;一、Mac基本快捷键操作&quot;&gt;&lt;/a&gt;一、Mac基本快捷键操作&lt;/h3&gt;&lt;p&gt;1.锁屏：command+control+q&lt;br&gt;2.复制：command+c&lt;br&gt;3.粘贴：command+v&lt;br&gt;4.撤销：command+z&lt;br&gt;5.剪贴：command+x&lt;br&gt;6.打开终端：command+space –&amp;gt;输入Terminal.app&lt;br&gt;7.全选：command+a&lt;br&gt;8.在方达中创建一个文件夹：shift+command+n&lt;br&gt;9.切换窗口：command+Tab&lt;br&gt;10.Option+Command+电源按钮：睡眠&lt;/p&gt;
    
    </summary>
    
    
      <category term="系统开发" scheme="https://xin-zhai.github.io/categories/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://xin-zhai.github.io/tags/git/"/>
    
      <category term="mac" scheme="https://xin-zhai.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://xin-zhai.github.io/2019/01/03/Git/"/>
    <id>https://xin-zhai.github.io/2019/01/03/Git/</id>
    <published>2019-01-03T15:07:28.000Z</published>
    <updated>2020-01-06T15:24:36.473Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Git的工作流程"><a href="#一、Git的工作流程" class="headerlink" title="一、Git的工作流程"></a>一、Git的工作流程</h3><p>1.克隆git资源作为工作目录<br>2.对资源进行操作<br>3.如果其他人修改了，你也可以更新你的资源<br>4.在提交前查看修改<br>5.提交修改<br>6.修改完成后，如果发现错误，可以撤回提交并再次修改</p><a id="more"></a><p><img src="https://github.com/xin-zhai/xin-zhai.github.io/blob/master/CodeImages/day005_1.png?raw=true" alt="enter image description here"><br><strong>Git工作区、暂存区、版本库</strong><br>所谓工作区就是你电脑上你所做改动的目录，暂存区就是暂存你提交的变动(git add)，版本库就是当你commit时，他会跟新版本，即暂存区的树目录会更新到版本库，master分支会跟新，也就是说，master所指向的目录就是暂存区你提交时的树目录。</p><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>当执行 “git rm –cached &lt; file&gt;” 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p><p>当执行 “git checkout .” 或者 “git checkout – &lt; file&gt;” 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p><p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD &lt; file&gt;” 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p><h3 id="二、Git基本命令"><a href="#二、Git基本命令" class="headerlink" title="二、Git基本命令"></a>二、Git基本命令</h3><p><strong>1.创建git仓库</strong></p><pre><code>git init filename</code></pre><p>初始化后，会在filename目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。.git 的目录，用于保存下载下来的所有版本记录。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><pre><code>git add *.txtgit add READMEgit commit -m &quot;说明，版本&quot;</code></pre><p><strong>2.克隆仓库</strong></p><pre><code>git clone pathgit clone path filename</code></pre><p>第一种是直接克隆到当前目录<br>第二种是克隆项目到指定目录</p><p><strong>3.git快照</strong><br>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。<br>a.git add<br>git add 命令可将该文件添加到缓存<br>新项目中，添加所有文件很普遍，我们可以使用 git add . 命令来添加当前项目的所有文件。<br>当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add</p><p>b.git status<br>git status 可以查看在上次提交之后是否有修改。</p><p>c.git diff<br>git diff 来查看执行 git status 的结果的详细信息。<br>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。</p><p>git diff 有两个主要的应用场景:</p><ul><li>尚未缓存的改动：git diff  fiilename1 filename2</li><li>查看已缓存的改动： git diff –cached  filename</li><li>查看已缓存的与未缓存的所有改动：git diff HEAD</li><li>显示摘要而非整个 diff：git diff –stat</li></ul><p>git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。</p><p>d.git commit<br>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。</p><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p><pre><code>git commit -agit commit -am &quot;版本信息&quot;</code></pre><p>e.git reset HEAD filename<br>git reset HEAD 命令用于取消已缓存的内容。<br>执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。</p><p>f.git rm<br>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm filename</span><br></pre></td></tr></table></figure><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f filename</span><br></pre></td></tr></table></figure><p>如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可</p><pre><code>git rm --cached filename</code></pre><p>g.git mv<br>git mv 命令用于移动或重命名一个文件、目录。</p><h3 id="Git分支常用的命令"><a href="#Git分支常用的命令" class="headerlink" title="Git分支常用的命令"></a>Git分支常用的命令</h3><p><strong>1.git commit</strong><br>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</p><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p><p>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因。</p><p><strong>2.git Branch</strong><br>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：</p><p>早建分支！多用分支！</p><p>这是因为即使创建再多分的支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。</p><p>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p><p><strong>git branch  branchname：创建分支</strong><br><strong>git checkout branchname: 切换到该分支</strong></p><p><strong>分支合并：</strong><br>接下来咱们看看如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。</p><p><strong>1.git merge branchname</strong><br>咱们先来看一下第一种方法 —— git merge。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p><p><strong>2.git rebase</strong><br>实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。<br>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><p><strong>在提交树上移动</strong><br>1.HEAD<br>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p>可以使用git checkout somthing来把head放到他的头上，然后就可以对该节点进行操作。(rebase,reset,revert等)</p><p><strong>相对引用</strong><br>使用 ^ 向上移动 1 个提交记录<br>使用 ~&lt; num&gt; 向上移动多个提交记录，如 ~3</p><p>比如 git checkout master^，将HEAD向上移动一个<br>git chechout HEAD~3，就是向上移动三个。</p><p>git branch -f master HEAD~3，强制向上移动master3次<br>git branch -f master C6，将master强制指向C6</p><p><strong>撤销变更</strong><br>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 git reset，还有就是 git revert。</p><p>1.git reset<br>git reset 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。<br>git reset HEAD~1撤销一步<br>2.git revert<br>虽然在你的本地分支中使用 git reset 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的哦！</p><p>为了撤销更改并分享给别人，我们需要使用 git revert。<br>git revert HEAD 新产生的是和上一个节点一样的状态</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Git的工作流程&quot;&gt;&lt;a href=&quot;#一、Git的工作流程&quot; class=&quot;headerlink&quot; title=&quot;一、Git的工作流程&quot;&gt;&lt;/a&gt;一、Git的工作流程&lt;/h3&gt;&lt;p&gt;1.克隆git资源作为工作目录&lt;br&gt;2.对资源进行操作&lt;br&gt;3.如果其他人修改了，你也可以更新你的资源&lt;br&gt;4.在提交前查看修改&lt;br&gt;5.提交修改&lt;br&gt;6.修改完成后，如果发现错误，可以撤回提交并再次修改&lt;/p&gt;
    
    </summary>
    
    
      <category term="系统开发" scheme="https://xin-zhai.github.io/categories/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://xin-zhai.github.io/tags/git/"/>
    
  </entry>
  
</feed>
